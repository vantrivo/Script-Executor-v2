local Players = game:GetService("Players")
local workspace = game:GetService("Workspace")
local player = Players.LocalPlayer

-- Supported part classes for export
local supportedClasses = {
    ["Part"] = true,
    ["WedgePart"] = true,
    ["CornerWedgePart"] = true,
    ["VehicleSeat"] = true,
    ["Seat"] = true,
    ["TrussPart"] = true,
}

local function getMaterialName(material)
    if typeof(material) == "EnumItem" then
        return material.Name
    elseif typeof(material) == "string" then
        return material
    end
    return "Plastic"
end

local function getAllParts()
    local parts = {}
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("BasePart") then
            if supportedClasses[obj.ClassName] then
                table.insert(parts, obj)
            elseif obj.ClassName == "Part" then
                -- Detect Ball or Cylinder shapes
                if obj.Shape == Enum.PartType.Ball or obj.Shape == Enum.PartType.Cylinder or obj.Shape == Enum.PartType.Block then
                    table.insert(parts, obj)
                end
            end
        end
    end
    return parts
end

local function serializeVector3(v)
    return string.format("Vector3.new(%.6f, %.6f, %.6f)", v.X, v.Y, v.Z)
end

local function serializeColor3(c)
    return string.format("Color3.new(%.6f, %.6f, %.6f)", c.R, c.G, c.B)
end

local function serializeCFrame(cf)
    local x, y, z, r00, r01, r02, r10, r11, r12, r20, r21, r22 = cf:GetComponents()
    return string.format("CFrame.new(%.6f, %.6f, %.6f, %.6f, %.6f, %.6f, %.6f, %.6f, %.6f, %.6f, %.6f, %.6f)",
        x, y, z, r00, r01, r02, r10, r11, r12, r20, r21, r22)
end

local function exportParts(parts)
    local t = {}
    for _, p in ipairs(parts) do
        local entry = {
            ClassName = p.ClassName,
            CFrame = p.CFrame,
            Size = p.Size,
            Color = p.Color,
            Material = getMaterialName(p.Material),
            Transparency = p.Transparency,
            CanCollide = p.CanCollide,
        }
        -- Save Shape for all Parts
        if p:IsA("Part") then
            entry.Shape = p.Shape.Name
        end
        table.insert(t, entry)
    end
    return t
end

local function serializeTable(tbl)
    local lines = {}
    table.insert(lines, "return {")
    for _, v in ipairs(tbl) do
        table.insert(lines, "    {")
        table.insert(lines, ("        ClassName = %q,"):format(v.ClassName))
        if v.Shape then
            table.insert(lines, ("        Shape = %q,"):format(v.Shape))
        end
        table.insert(lines, ("        CFrame = %s,"):format(serializeCFrame(v.CFrame)))
        table.insert(lines, ("        Size = %s,"):format(serializeVector3(v.Size)))
        table.insert(lines, ("        Color = %s,"):format(serializeColor3(v.Color)))
        table.insert(lines, ("        Material = %q,"):format(v.Material))
        table.insert(lines, ("        Transparency = %.6f,"):format(v.Transparency))
        table.insert(lines, ("        CanCollide = %s,"):format(tostring(v.CanCollide)))
        table.insert(lines, "    },")
    end
    table.insert(lines, "}")
    return table.concat(lines, "\n")
end

local parts = getAllParts()
local exportedTable = exportParts(parts)
local exportString = serializeTable(exportedTable)

if setclipboard then
    setclipboard(exportString)
    print("Exported parts data copied to clipboard!")
else
    print("Clipboard not available. Here is the export string:")
    print(exportString)
end
