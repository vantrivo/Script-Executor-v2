--// Services
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local player = Players.LocalPlayer
local HttpService = game:GetService("HttpService")

--// Export Helpers
local function getMaterialName(material)
    if typeof(material) == "EnumItem" then
        return material.Name
    elseif typeof(material) == "string" then
        return material
    end
    return "Plastic"
end

local function getAllParts()
    local parts = {}
    for _, obj in ipairs(Workspace:GetDescendants()) do
        if obj:IsA("BasePart") then
            table.insert(parts, obj)
        end
    end
    return parts
end

local function serializeVector3(v)
    return string.format("Vector3.new(%.6f, %.6f, %.6f)", v.X, v.Y, v.Z)
end

local function serializeColor3(c)
    return string.format("Color3.new(%.6f, %.6f, %.6f)", c.R, c.G, c.B)
end

local function serializeCFrame(cf)
    local x, y, z, r00, r01, r02, r10, r11, r12, r20, r21, r22 = cf:GetComponents()
    return string.format(
        "CFrame.new(%.6f, %.6f, %.6f, %.6f, %.6f, %.6f, %.6f, %.6f, %.6f, %.6f, %.6f, %.6f)",
        x, y, z, r00, r01, r02, r10, r11, r12, r20, r21, r22
    )
end

local function exportParts(parts)
    local t = {}
    for _, p in ipairs(parts) do
        local entry = {
            ClassName = p.ClassName,
            CFrame = p.CFrame,
            Size = p.Size,
            Color = p.Color,
            Material = getMaterialName(p.Material),
            Transparency = p.Transparency,
            CanCollide = p.CanCollide,
        }
        if p:IsA("Part") then
            entry.Shape = p.Shape.Name
        end
        table.insert(t, entry)
    end
    return t
end

local function serializeTable(tbl)
    local lines = {}
    table.insert(lines, "return {")
    for _, v in ipairs(tbl) do
        table.insert(lines, "    {")
        table.insert(lines, ("        ClassName = %q,"):format(v.ClassName))
        if v.Shape then
            table.insert(lines, ("        Shape = %q,"):format(v.Shape))
        end
        table.insert(lines, ("        CFrame = %s,"):format(serializeCFrame(v.CFrame)))
        table.insert(lines, ("        Size = %s,"):format(serializeVector3(v.Size)))
        table.insert(lines, ("        Color = %s,"):format(serializeColor3(v.Color)))
        table.insert(lines, ("        Material = %q,"):format(v.Material))
        table.insert(lines, ("        Transparency = %.6f,"):format(v.Transparency))
        table.insert(lines, ("        CanCollide = %s,"):format(tostring(v.CanCollide)))
        table.insert(lines, "    },")
    end
    table.insert(lines, "}")
    return table.concat(lines, "\n")
end

--// GUI
local ScreenGui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))

local Frame = Instance.new("Frame", ScreenGui)
Frame.Size = UDim2.new(0, 250, 0, 120)
Frame.Position = UDim2.new(0.5, -125, 0.5, -60)
Frame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)

local ExportButton = Instance.new("TextButton", Frame)
ExportButton.Size = UDim2.new(0, 230, 0, 40)
ExportButton.Position = UDim2.new(0, 10, 0, 10)
ExportButton.Text = "Export Parts"
ExportButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
ExportButton.TextColor3 = Color3.fromRGB(255, 255, 255)

local ReadButton = Instance.new("TextButton", Frame)
ReadButton.Size = UDim2.new(0, 230, 0, 40)
ReadButton.Position = UDim2.new(0, 10, 0, 60)
ReadButton.Text = "Read File"
ReadButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
ReadButton.TextColor3 = Color3.fromRGB(255, 255, 255)

--// Button Logic
ExportButton.MouseButton1Click:Connect(function()
    local parts = getAllParts()
    local exportedTable = exportParts(parts)
    local exportString = serializeTable(exportedTable)

    if writefile then
        writefile("parts_export.lua", exportString)
        print("Exported to parts_export.lua")
    elseif setclipboard then
        setclipboard(exportString)
        print("Exported to clipboard!")
    else
        warn("No file write or clipboard support available.")
    end
end)

ReadButton.MouseButton1Click:Connect(function()
    if readfile then
        local data = readfile("parts_export.lua")
        print("Read file successfully. Length:", #data)
        -- Your import logic stays OUTSIDE this GUI
    else
        warn("readfile not supported.")
    end
end)
